{"version":3,"sources":["components/ThemeSelector.js","components/Map.js","components/Markers.js","App.js","serviceWorker.js","index.js"],"names":["ThemeSelector","thumbnails","onChange","this","props","changeTheme","forEach","theme","push","react_default","a","createElement","key","src","onClick","alt","id","Component","Map","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","platform","map","state","app_id","app_code","position","zoom","style","window","H","service","Platform","container","layers","settings","mapevents","MapEvents","ui","UI","createDefault","_this2","navigator","geolocation","getCurrentPosition","setCenter","lat","coords","latitude","lng","longitude","error","setState","message","getPlatform","createDefaultLayers","element","document","getElementById","getMap","normal","center","Behavior","getUI","objectSpread","layer","getMapTileService","type","createTileLayer","setBaseLayer","width","height","background","Markers","App","bind","assertThisInitialized","evt","preventDefault","change","target","className","components_Markers","components_Map","components_ThemeSelector","Boolean","location","hostname","match","ReactDOM","render","src_App_0","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50643c1e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass ThemeSelector extends Component {\n    render() {\n        var themes = [\n            // 'normal.day',\n            // 'normal.day.grey',\n            // 'normal.day.transit',\n            // 'normal.night',\n            // 'normal.night.grey',\n            // 'reduced.night',\n            // 'reduced.day',\n            // 'pedestrian.day',\n            // 'pedestrian.night',\n        ];\n\n        var thumbnails = [];\n        var onChange = this.props.changeTheme;\n        themes.forEach(function(theme) {\n            thumbnails.push(<img key={ theme } src={ 'images/' + theme + '.thumb.png' } onClick= { onChange } alt={ theme } id={ theme } />);\n        });\n\n        return (\n            <div>\n            { thumbnails }\n            </div>\n        );\n\n    }\n}\n\nexport default ThemeSelector;","import React, {Component} from 'react';\n// import PropTypes from 'prop-types';\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n\n        this.platform = null;\n        this.map = null;\n\n        this.state = {\n            app_id: props.app_id,\n            app_code: props.app_code,\n            position: null,\n            zoom: props.zoom,\n            map: null,\n            theme: props.theme,\n            style: props.style,\n        }\n    }\n\n    getPlatform() {\n        return new window.H.service.Platform(this.state);\n    }\n\n    getMap(container, layers, settings) {\n        return new window.H.Map(container, layers, settings);\n    }\n\n    getEvents(map) {\n        return new window.H.mapevents.MapEvents(map);\n    }\n\n    // getBehavior(events) {\n    //     return new window.H.mapevents.Behavior(events);\n    // }\n\n    getUI(map, layers) {\n        return new window.H.ui.UI.createDefault(map, layers);\n    }\n\n    componentDidMount() {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                (position) => {\n                    this.map.setCenter({\n                        lat: position.coords.latitude,\n                        lng: position.coords.longitude\n                    });\n                },\n                (error) => this.setState({\n                    error: error.message\n                })\n            );\n        }\n        this.platform = this.getPlatform();\n        var layers = this.platform.createDefaultLayers();\n        var element = document.getElementById('here-map');\n        this.map = this.getMap(element, layers.normal.map, {\n            center: this.state.center,\n            zoom: this.state.zoom,\n        });\n        var behavior = new window.H.mapevents.Behavior(new window.H.mapevents.MapEvents(this.map));\n        // eslint-disable-next-line\n        // eslint-disable-next-line\n        var ui = this.getUI(this.map, layers);\n        this.setState({\n            ...this.state,\n            map: this.map\n        });\n    }\n\n    shouldComponentUpdate(props, state) {\n        this.changeTheme(props.theme, props.style);\n        return false;\n    }\n\n    changeTheme(theme, style) {\n        var tiles = this.platform.getMapTileService({\n            'type': 'base'\n        });\n        var layer = tiles.createTileLayer(\n            'maptile',\n            theme,\n            256,\n            'png', {\n                'style': 'flame'\n            }\n        );\n        this.map.setBaseLayer(layer);\n    }\n\n    render() {\n        return ( \n        <div id = \"here-map\"\n            style = {\n                {\n                    width: '100%',\n                    height: '400px',\n                    background: 'grey'\n                }\n            }\n            />\n        );\n    }\n}\n\nexport default Map;","import React, { Component } from 'react';\n\nclass Markers extends Component {\n    constructor() {\n        super();\n    }\n\n  \n\n    render() {\n        return (\n            <div></div>\n        )\n    }\n}\n\nexport default Markers;","// import React from 'react';\nimport React, { Component } from 'react';\nimport './App.css';\nimport ThemeSelector from './components/ThemeSelector';\nimport Map from './components/Map';\nimport Markers from './components/Markers'\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            theme: 'normal.day',\n            latitude: false,\n            longitude: false,\n            error: null\n        }\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(evt) {\n        evt.preventDefault();\n        var change = evt.target.id;\n        this.setState({\n            ...this.state,\n            \"theme\": change,\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Markers />\n                <Map\n                    app_id=\"68jKP099OUN8oLgbd5Jq\"\n                    app_code=\"Rb8T_A8l4p9bEPt2eawMCA\"\n                    zoom=\"12\"\n                    theme={this.state.theme}\n                />\n                <ThemeSelector changeTheme={this.onChange} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}